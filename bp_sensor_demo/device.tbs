include "global.tbh"
const SENSOR_SAMPLING_TIME=20 'Every 10 seconds

dim sample_timer as word=SENSOR_SAMPLING_TIME
dim event_post_timer as dword

declare sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)

declare sub emulate_iot_device_telemetry()

sub callback_dns_failure(status as en_dns_status_codes)
	
end sub
        
sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)

	if iothub_state=EN_IOTHUB_DPS_CONNECTING then
		iothub_dns_answer_acquired(return_type,return_string)
	else
		mqtt_dns_answer_acquired(return_type,return_string)
	end if		
end sub 

sub callback_dns_ok()

end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
    
end sub
        
sub callback_dns_buff_released()
	sock_release(sock.num)
end sub
                  
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
    
end sub
        
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
    
end sub
        
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
    
end sub
        
function callback_stg_vm_read(address as word) as byte
    
end function
        
sub callback_stg_vm_write(data_to_write as byte, address as word)
    
end sub

sub callback_on_telemetry_sent()
	dim active_rec_num as word	
	tbl_select("events","events")
	tbl_get_num_records(active_rec_num,NO)
	if active_rec_num>0 then
		event_post_timer=1
		tbl_record_delete(1)
	end if			

end sub

sub callback_iothub_command_triggered(byref command as string, byref params as string)

	iothub_command_respond(command,"{}",EN_IOTHUB_OK)
end sub

public sub device_proc_timer()
	if sample_timer>0 then
		sample_timer=sample_timer-1
	end if 
	select case sample_timer
	case 0:
		modbus_master_request(BP_02_DEVICE_ID, ReadInputRegisters, 400, 1, "", MODBUS_MASTER_INTERFACE, modbus_RTU)
		sample_timer=SENSOR_SAMPLING_TIME
	case 1:
		modbus_master_request(BP_03_DEVICE_ID, ReadInputRegisters, 500, 1, "", MODBUS_MASTER_INTERFACE, modbus_RTU)
	case else:	
	end select

	if event_post_timer>0 then
		event_post_timer=event_post_timer-1
	else
		event_post_timer=val(stg_get("EPT",0))
		event_post_timer=event_post_timer*120
		dim active_rec_num as word			
		tbl_select("events","events")
		tbl_get_num_records(active_rec_num,NO)
		if active_rec_num>0 then
			emulate_iot_device_telemetry()
		end if			
	end if
	
end sub

sub emulate_iot_device_telemetry()

	if iothub_state<>EN_IOTHUB_CONNECTED then
		exit sub
	end if

	dim ts, light, temp as string(36)
	
	tbl_select("events","events")
	if tbl_record_read_active(1)=EN_TBL_STATUS_OK	then
		tbl_field_sg("time",ts,EN_TBL_GET)
		tbl_field_sg("temp",temp,EN_TBL_GET)
		tbl_field_sg("light",light,EN_TBL_GET)
		iothub_update_telemetry("temperature",temp)
		iothub_update_telemetry("light",light)	
		iothub_send_telemetry(ts)		
	end if	

end sub

sub callback_mqtt_connect_ok()
	iothub_on_connected()
	event_post_timer=1
	pat.play("G-~",PL_PAT_CANINT)
end sub

sub callback_mqtt_connect_lost()
	pat.play("R-~",PL_PAT_CANINT)
	iothub_on_disconnected()
end sub

sub callback_mqtt_sub_ok()
	
	iothub_mqtt_sub_ok()
	
end sub

sub callback_mqtt_notif(byref topic as string,byref data as string,remaining_bytes as dword)

	iothub_proc_mqtt_msg(topic,data)
end sub

sub callback_tbl_error(status as en_tbl_status_codes)
	
end sub

function callback_tbl_fail_to_open(byref filename as string, status as pl_fd_status_codes, filenum as byte) as no_yes
	
end function

sub callback_tbl_field_error(byref file_name as string,byref field_name as string,tbl_result as en_tbl_status_codes)
	
end sub

sub callback_tbl_modified(byref file_name as string, modified_operation as en_tbl_modified_operation)
	
end sub

sub callback_luis_bt_connected()
	
end sub

sub callback_luis_bt_disconnected()
	
end sub

sub callback_luis_bt_enabled()
	
end sub

sub callback_luis_bt_disabled()
	
end sub

sub callback_luis_buzz_command()
	
end sub

sub time_to_str(byref ts_str as string(20),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)

	time_year_str=str(year(time_daycount)+2000)
	time_month_str=str(month(time_daycount))
	time_date_str=str(date(time_daycount))
	time_hour_str=str(hours(time_mincount))
	time_minute_str=str(minutes(time_mincount))
	time_second_str=str(time_second_byte)

	if len(time_hour_str) < 2 then 
		time_hour_str="0"+time_hour_str 
	end if
	if len(time_minute_str) < 2 then 
		time_minute_str="0"+time_minute_str 
	end if
	if len(time_second_str) < 2 then 
		time_second_str="0"+time_second_str 
	end if
	if len(time_date_str) < 2 then 
		time_date_str="0"+time_date_str 
	end if
	if len(time_month_str) < 2 then 
		time_month_str="0"+time_month_str 
	end if
	ts_str=time_year_str+"-"+time_month_str+"-"+time_date_str+"T"+time_hour_str+":"+time_minute_str+":"+time_second_str
	
end sub

sub callback_iothub_set_datetime(byref dt_string as string)
	
	'Mon, 08 Feb 2021 03:16:19 GMT
	dim daycounts, mincounts as word
	dim curr_daycounts, curr_mincounts as word
	dim syear,smonth,sdate,shour,smin,ssec as string(4)
	dim b as byte
	
	syear=mid(dt_string,15,2)
	smonth=mid(dt_string,9,3)
	sdate=mid(dt_string,6,2)
	shour=mid(dt_string,18,2)
	smin=mid(dt_string,21,2)
	ssec=mid(dt_string,24,2)
	
	select case smonth
	case "Jan": smonth="01"
	case "Feb": smonth="02"
	case "Mar": smonth="03"
	case "Apr": smonth="04"
	case "May": smonth="05"
	case "Jun": smonth="06"
	case "Jul": smonth="07"
	case "Aug": smonth="08"
	case "Sep": smonth="09"
	case "Oct": smonth="10"
	case "Nov": smonth="11"
	case "Dec": smonth="12"
	case else:
	end select
	daycounts=daycount(val(syear),val(smonth),val(sdate))
	mincounts=mincount(val(shour),val(smin))
	
	rtc.getdata(curr_daycounts,curr_mincounts, b)
	if curr_daycounts<>daycounts or curr_mincounts<>mincounts then
		b=val(ssec) 	
		rtc.setdata(daycounts,mincounts,b)
	end if
		
end sub

sub callback_iothub_device_assigned(byref assigned_hub as string)
	sys.debugprint(assigned_hub+"\x0d\x0a")
end sub

sub callback_iothub_dps_failed()
	
	sys.debugprint("dps connection failed\x0d\x0a")
end sub

function modbus_callback_ReadCoilStatus(address as word) as boolean
modbus_callback_ReadCoilStatus=false
select case address


    case MODItem_addr:
        
case else:
end select
end function
    
function modbus_callback_ReadInputStatus(address as word) as boolean
modbus_callback_ReadInputStatus=false
select case address


case else:
end select
end function
    
function modbus_callback_WriteSingleCoil(address as word, value as low_high) as boolean
modbus_callback_WriteSingleCoil=true
select case address


    case MODItem_addr:
        
case else
modbus_callback_WriteSingleCoil=false
end select
end function
    
function modbus_callback_ReadHoldingRegister(address as word) as word
modbus_callback_ReadHoldingRegister=0
select case address
case else:
end select
end function
    
function modbus_callback_ReadInputRegister(address as word) as word
modbus_callback_ReadInputRegister=0
select case address


case else:
end select
end function
    
function modbus_set_holding_register(address as word, data as string) as boolean
modbus_set_holding_register = true
select case address

case else
    modbus_set_holding_register = false
end select

end function
    
sub callback_modbus_slave_reply(byref request_item as modbus_request_item, byref reply as string)
	dim bytes as byte(255) = reply
	dim ts, light, temp as string(36)
	dim daycounts, mincounts as word
	dim seconds as byte
	dim tbl_result as en_tbl_status_codes	
	select case request_item.device_id
		case BP_03_DEVICE_ID:
			
			if request_item.start_register=500 then
				dim BP_03_Light_val as word = modbus_read_word(bytes,0)
				light=str(BP_03_Light_val)
				sys.debugprint(light+" lux \n")
				tbl_result=tbl_select("events","events")
				tbl_result=tbl_field_sg("light",light,EN_TBL_SET)
			end if	
		case BP_02_DEVICE_ID:
			if request_item.start_register=400 then
				dim BP_02_Temperature_val as word = modbus_read_word(bytes,0)
				temp=str(BP_02_Temperature_val)
				temp=left(temp,len(temp)-1)+"."+right(temp,1)
				sys.debugprint(temp+" C\n")
				tbl_result=tbl_field_sg("temp",temp,EN_TBL_SET)
				rtc.getdata(daycounts,mincounts,seconds)
				time_to_str(ts,daycounts,mincounts,seconds)
				ts=ts+".000Z"
				tbl_result=tbl_field_sg("time",ts,EN_TBL_SET)
				tbl_result=tbl_record_add("")	
			end if
		
	case else
	end select
end sub
      
sub init_io_expander()
    'Tibbit 41 setup on socket 1
    '================================================================
    select case tbt41_init("peripheral3_PORT_NUM", YES,S1_CLK,S1_DATA,S1_CHANNEL)
    case TBT41_SELF_TEST_FAIL:
        sys.debugprint("TBT41 self test failed!\r\n")
        sys.halt()

    case TBT41_NO_SSI_AVAILABLE:
        sys.debugprint("SSI channel could not be allocated, using bit banging instead.\r\n")
    end select 
    '-----------------------------------------------------------------
end sub
    